@page "/topics/details"
@using Microsoft.EntityFrameworkCore
@using BlazorAppDemo.Models
@inject IDbContextFactory<BlazorAppDemo.Data.BlazorAppDemoContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Topic</h2>
    <hr />
    @if (topic is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@topic.Title</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@topic.Description</dd>
            <dt class="col-sm-2">Author</dt>
            <dd class="col-sm-10">@topic.Author</dd>
            <dt class="col-sm-2">PublishDate</dt>
            <dd class="col-sm-10">@topic.PublishDate</dd>
            <dt class="col-sm-2">Link</dt>
            <dd class="col-sm-10">@topic.Link</dd>
        </dl>
        <div>
            <a href="@($"/topics/edit?topicid={topic.TopicID}")">Edit</a> |
            <a href="@($"/topics")">Back to List</a>
        </div>
    }
</div>

@code {
    private Topic? topic;

    [SupplyParameterFromQuery]
    private int TopicID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        topic = await context.Topic.FirstOrDefaultAsync(m => m.TopicID == TopicID);

        if (topic is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
